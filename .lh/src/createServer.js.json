{
    "sourceFile": "src/createServer.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1718107052861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718107059657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,69 @@\n+/* eslint-disable max-len */\n+// src/createServer.js\n+\n+const http = require('http');\n+const { convertToCase } = require('./convertToCase');\n+\n+const supportedCases = ['SNAKE', 'KEBAB', 'CAMEL', 'PASCAL', 'UPPER'];\n+\n+function createServer() {\n+  return http.createServer((req, res) => {\n+    res.setHeader('Content-Type', 'application/json');\n+\n+    const [path, queryString] = req.url.split('?');\n+    const params = new URLSearchParams(queryString);\n+    const toCase = params.get('toCase');\n+    const textToConvert = path.slice(1);\n+\n+    const errors = [];\n+\n+    if (!textToConvert) {\n+      errors.push({\n+        message:\n+          'Text to convert is required. Correct request is: \"/<TEXT_TO_CONVERT>?toCase=<CASE_NAME>\".',\n+      });\n+    }\n+\n+    if (!toCase) {\n+      errors.push({\n+        message:\n+          '\"toCase\" query param is required. Correct request is: \"/<TEXT_TO_CONVERT>?toCase=<CASE_NAME>\".',\n+      });\n+    } else if (!supportedCases.includes(toCase)) {\n+      errors.push({\n+        message:\n+          'This case is not supported. Available cases: SNAKE, KEBAB, CAMEL, PASCAL, UPPER.',\n+      });\n+    }\n+\n+    if (errors.length > 0) {\n+      res.statusCode = 400;\n+      res.statusMessage = 'Bad request';\n+      res.end(JSON.stringify({ errors }));\n+\n+      return;\n+    }\n+\n+    try {\n+      const result = convertToCase(toCase, textToConvert);\n+\n+      res.statusCode = 200;\n+      res.statusMessage = 'OK';\n+\n+      res.end(\n+        JSON.stringify({\n+          originalCase: result.originalCase,\n+          targetCase: toCase,\n+          originalText: textToConvert,\n+          convertedText: result.convertedText,\n+        }),\n+      );\n+    } catch (error) {\n+      res.statusCode = 500;\n+      res.statusMessage = 'Internal Server Error';\n+      res.end(JSON.stringify({ errors: [{ message: error.message }] }));\n+    }\n+  });\n+}\n+\n+module.exports = { createServer };\n"
                },
                {
                    "date": 1718107216739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,129 +1,43 @@\n-/* eslint-disable max-len */\n-// src/createServer.js\n-\n const http = require('http');\n-const { convertToCase } = require('./convertToCase');\n+const { convertToCase } = require('./convertToCase/convertToCase');\n+const { validateInput } = require('./inputValidator');\n \n-const supportedCases = ['SNAKE', 'KEBAB', 'CAMEL', 'PASCAL', 'UPPER'];\n-\n-function createServer() {\n-  return http.createServer((req, res) => {\n+const createServer = () => {\n+  const server = http.createServer((req, res) => {\n     res.setHeader('Content-Type', 'application/json');\n \n-    const [path, queryString] = req.url.split('?');\n-    const params = new URLSearchParams(queryString);\n-    const toCase = params.get('toCase');\n-    const textToConvert = path.slice(1);\n+    const parsedUrl = new URL(req.url, `http://${req.headers.host}`);\n+    const query = parsedUrl.searchParams.get('toCase') || '';\n+    const word = parsedUrl.pathname.slice(1);\n \n-    const errors = [];\n+    const errors = validateInput(word, query);\n \n-    if (!textToConvert) {\n-      errors.push({\n-        message:\n-          'Text to convert is required. Correct request is: \"/<TEXT_TO_CONVERT>?toCase=<CASE_NAME>\".',\n-      });\n-    }\n-\n-    if (!toCase) {\n-      errors.push({\n-        message:\n-          '\"toCase\" query param is required. Correct request is: \"/<TEXT_TO_CONVERT>?toCase=<CASE_NAME>\".',\n-      });\n-    } else if (!supportedCases.includes(toCase)) {\n-      errors.push({\n-        message:\n-          'This case is not supported. Available cases: SNAKE, KEBAB, CAMEL, PASCAL, UPPER.',\n-      });\n-    }\n-\n     if (errors.length > 0) {\n       res.statusCode = 400;\n-      res.statusMessage = 'Bad request';\n       res.end(JSON.stringify({ errors }));\n \n       return;\n     }\n \n     try {\n-      const result = convertToCase(toCase, textToConvert);\n+      const convertedWord = convertToCase(word, query);\n+      const result = {\n+        originalText: word,\n+        targetCase: query.toUpperCase(),\n+        originalCase: convertedWord.originalCase,\n+        convertedText: convertedWord.convertedText,\n+      };\n \n       res.statusCode = 200;\n       res.statusMessage = 'OK';\n-\n-      res.end(\n-        JSON.stringify({\n-          originalCase: result.originalCase,\n-          targetCase: toCase,\n-          originalText: textToConvert,\n-          convertedText: result.convertedText,\n-        }),\n-      );\n+      res.end(JSON.stringify(result));\n     } catch (error) {\n-      res.statusCode = 500;\n-      res.statusMessage = 'Internal Server Error';\n+      res.statusCode = 400;\n       res.end(JSON.stringify({ errors: [{ message: error.message }] }));\n     }\n   });\n-}\n \n-module.exports = { createServer };\n-// src/createServer.js\n+  return server;\n+};\n \n-const http = require('http');\n-const { convertToCase } = require('./convertToCase');\n-\n-const supportedCases = ['SNAKE', 'KEBAB', 'CAMEL', 'PASCAL', 'UPPER'];\n-\n-function createServer() {\n-  return http.createServer((req, res) => {\n-    res.setHeader('Content-Type', 'application/json');\n-\n-    const [path, queryString] = req.url.split('?');\n-    const params = new URLSearchParams(queryString);\n-    const toCase = params.get('toCase');\n-    const textToConvert = path.slice(1);\n-\n-    const errors = [];\n-\n-    if (!textToConvert) {\n-      errors.push({\n-        message: 'Text to convert is required. Correct request is: \"/<TEXT_TO_CONVERT>?toCase=<CASE_NAME>\".',\n-      });\n-    }\n-\n-    if (!toCase) {\n-      errors.push({\n-        message: '\"toCase\" query param is required. Correct request is: \"/<TEXT_TO_CONVERT>?toCase=<CASE_NAME>\".',\n-      });\n-    } else if (!supportedCases.includes(toCase)) {\n-      errors.push({\n-        message: 'This case is not supported. Available cases: SNAKE, KEBAB, CAMEL, PASCAL, UPPER.',\n-      });\n-    }\n-\n-    if (errors.length > 0) {\n-      res.statusCode = 400;\n-      res.statusMessage = 'Bad request';\n-      res.end(JSON.stringify({ errors }));\n-      return;\n-    }\n-\n-    try {\n-      const result = convertToCase(toCase, textToConvert);\n-      res.statusCode = 200;\n-      res.statusMessage = 'OK';\n-      res.end(JSON.stringify({\n-        originalCase: result.originalCase,\n-        targetCase: toCase,\n-        originalText: textToConvert,\n-        convertedText: result.convertedText,\n-      }));\n-    } catch (error) {\n-      res.statusCode = 500;\n-      res.statusMessage = 'Internal Server Error';\n-      res.end(JSON.stringify({ errors: [{ message: error.message }] }));\n-    }\n-  });\n-}\n-\n module.exports = { createServer };\n"
                },
                {
                    "date": 1718107311103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+const http = require('http');\n+const { convertToCase } = require('./convertToCase/convertToCase');\n+const { validateInput } = require('./validator');\n+\n+const createServer = () => {\n+  const server = http.createServer((req, res) => {\n+    res.setHeader('Content-Type', 'application/json');\n+\n+    const parsedUrl = new URL(req.url, `http://${req.headers.host}`);\n+    const query = parsedUrl.searchParams.get('toCase') || '';\n+    const word = parsedUrl.pathname.slice(1);\n+\n+    const errors = validateInput(word, query);\n+\n+    if (errors.length > 0) {\n+      res.statusCode = 400;\n+      res.end(JSON.stringify({ errors }));\n+\n+      return;\n+    }\n+\n+    try {\n+      const convertedWord = convertToCase(word, query);\n+      const result = {\n+        originalText: word,\n+        targetCase: query.toUpperCase(),\n+        originalCase: convertedWord.originalCase,\n+        convertedText: convertedWord.convertedText,\n+      };\n+\n+      res.statusCode = 200;\n+      res.statusMessage = 'OK';\n+      res.end(JSON.stringify(result));\n+    } catch (error) {\n+      res.statusCode = 400;\n+      res.end(JSON.stringify({ errors: [{ message: error.message }] }));\n+    }\n+  });\n+\n+  return server;\n+};\n+\n+module.exports = { createServer };\n"
                }
            ],
            "date": 1718107052861,
            "name": "Commit-0",
            "content": "// src/createServer.js\n\nconst http = require('http');\nconst { convertToCase } = require('./convertToCase');\n\nconst supportedCases = ['SNAKE', 'KEBAB', 'CAMEL', 'PASCAL', 'UPPER'];\n\nfunction createServer() {\n  return http.createServer((req, res) => {\n    res.setHeader('Content-Type', 'application/json');\n\n    const [path, queryString] = req.url.split('?');\n    const params = new URLSearchParams(queryString);\n    const toCase = params.get('toCase');\n    const textToConvert = path.slice(1);\n\n    const errors = [];\n\n    if (!textToConvert) {\n      errors.push({\n        message: 'Text to convert is required. Correct request is: \"/<TEXT_TO_CONVERT>?toCase=<CASE_NAME>\".',\n      });\n    }\n\n    if (!toCase) {\n      errors.push({\n        message: '\"toCase\" query param is required. Correct request is: \"/<TEXT_TO_CONVERT>?toCase=<CASE_NAME>\".',\n      });\n    } else if (!supportedCases.includes(toCase)) {\n      errors.push({\n        message: 'This case is not supported. Available cases: SNAKE, KEBAB, CAMEL, PASCAL, UPPER.',\n      });\n    }\n\n    if (errors.length > 0) {\n      res.statusCode = 400;\n      res.statusMessage = 'Bad request';\n      res.end(JSON.stringify({ errors }));\n      return;\n    }\n\n    try {\n      const result = convertToCase(toCase, textToConvert);\n      res.statusCode = 200;\n      res.statusMessage = 'OK';\n      res.end(JSON.stringify({\n        originalCase: result.originalCase,\n        targetCase: toCase,\n        originalText: textToConvert,\n        convertedText: result.convertedText,\n      }));\n    } catch (error) {\n      res.statusCode = 500;\n      res.statusMessage = 'Internal Server Error';\n      res.end(JSON.stringify({ errors: [{ message: error.message }] }));\n    }\n  });\n}\n\nmodule.exports = { createServer };\n"
        }
    ]
}